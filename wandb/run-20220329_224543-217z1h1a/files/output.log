Files already downloaded and verified
Files already downloaded and verified
  0%|                                                                                            | 0/1 [00:00<?, ?it/s]
  0%|                                                                                           | 0/10 [00:00<?, ?it/s]
Running Evolution for fitness
  0%|                                                                                            | 0/1 [02:15<?, ?it/s]
Traceback (most recent call last):
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 216, in <module>
    run()
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 186, in run
    solution_over_time, fitness_over_time = evolution(generations=n_iters, population_size=pop_size, num_children=num_children, tournament_size=tournament_size, num_winners=num_winners, evolution_type=run_name)
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 108, in evolution
    model.fitness =  model.test_step(next(iter(data_module.train_dataloader())), 0)['test_novelty']
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\helper_hpc.py", line 294, in test_step
    novelty_score = evol.compute_feature_novelty(self.activations)
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 56, in compute_feature_novelty
    avg_dist[str(layer)] = np.mean(dist[str(layer)])
  File "<__array_function__ internals>", line 180, in mean
  File "C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\numpy\core\fromnumeric.py", line 3474, in mean
    return _methods._mean(a, axis=axis, dtype=dtype,
  File "C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\numpy\core\_methods.py", line 163, in _mean
    arr = asanyarray(a)
  File "C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\torch\_tensor.py", line 732, in __array__
    return self.numpy()
RuntimeError: Can't call numpy() on Tensor that requires grad. Use tensor.detach().numpy() instead.