updating config
config: {'batch_size': 64, 'experiment_name': 'attempting to rewrite compute diversity fuction', 'evo_gens': 10, 'evo_pop': 10, 'evo_dataset_for_novelty': 'cifar10', 'evo_num_runs': 1, 'evo_tourney_size': 4, 'evo_num_winners': 2, 'evo_num_children': 10}
Files already downloaded and verified
Files already downloaded and verified
C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\pytorch_lightning\core\datamodule.py:88: LightningDeprecationWarning: DataModule property `train_transforms` was deprecated in v1.5 and will be removed in v1.7.
  rank_zero_deprecation(
C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\pytorch_lightning\core\datamodule.py:107: LightningDeprecationWarning: DataModule property `val_transforms` was deprecated in v1.5 and will be removed in v1.7.
  rank_zero_deprecation(
Running Evolution for fitness
C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\pytorch_lightning\core\datamodule.py:126: LightningDeprecationWarning: DataModule property `test_transforms` was deprecated in v1.5 and will be removed in v1.7.
  rank_zero_deprecation(
  0%|                                                                                            | 0/1 [00:00<?, ?it/s]
Initializing
1649781879.8429892
  0%|                                                                                           | 0/10 [00:00<?, ?it/s]
472601948.0
  0%|                                                                                            | 0/1 [00:07<?, ?it/s]
Traceback (most recent call last):
  File "C:\Users\Jordan\Learning\UVM\Research\novel-feature-detector\evolution.py", line 220, in <module>
    run()
  File "C:\Users\Jordan\Learning\UVM\Research\novel-feature-detector\evolution.py", line 186, in run
    solution_over_time, fitness_over_time = evolution(generations=n_iters, population_size=pop_size, num_children=num_children, tournament_size=tournament_size, num_winners=num_winners, evolution_type=run_name)
  File "C:\Users\Jordan\Learning\UVM\Research\novel-feature-detector\evolution.py", line 87, in evolution
    model.fitness =  net.get_fitness(net_input)
  File "C:\Users\Jordan\Learning\UVM\Research\novel-feature-detector\net.py", line 160, in get_fitness
    novelty_score = self.compute_feature_novelty()
  File "C:\Users\Jordan\Learning\UVM\Research\novel-feature-detector\net.py", line 285, in compute_feature_novelty
    l = loops(list(self.activations.values()))
  File "C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\numba\core\dispatcher.py", line 468, in _compile_for_args
    error_rewrite(e, 'typing')
  File "C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\numba\core\dispatcher.py", line 409, in error_rewrite
    raise e.with_traceback(None)
numba.core.errors.TypingError: Failed in nopython mode pipeline (step: nopython frontend)
[1mNo implementation of function Function(<built-in function setitem>) found for signature:
[1m 
[1m >>> setitem(reflected list(reflected list(array(float32, 4d, C))<iv=None>)<iv=None>, int64, float64)
[1m 
[1mThere are 16 candidate implementations:
[1m  - Of which 14 did not match due to:
[1m  Overload of function 'setitem': File: <numerous>: Line N/A.
[1m    With argument(s): '(reflected list(reflected list(array(float32, 4d, C))<iv=None>)<iv=None>, int64, float64)':
[1m   No match.
[1m  - Of which 2 did not match due to:
[1m  Overload in function 'SetItemSequence.generic': File: numba\core\typing\collections.py: Line 56.
[1m    With argument(s): '(reflected list(reflected list(array(float32, 4d, C))<iv=None>)<iv=None>, int64, float64)':
[1m   Rejected as the implementation raised a specific error:
[1m     TypingError: invalid setitem with value of float64 to element of reflected list(array(float32, 4d, C))<iv=None>
  raised from C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\numba\core\typing\collections.py:65
[1mDuring: typing of setitem at C:\Users\Jordan\Learning\UVM\Research\novel-feature-detector\net.py (276)
[1mFile "net.py", line 276:
[1m        def loops(acts):
[1m            <source elided>
[1m                            pairwise[batch, channel2, channel] = div
[1m                acts[layer] = pairwise.sum()
                [1m^