Files already downloaded and verified
Files already downloaded and verified
C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\pytorch_lightning\core\datamodule.py:88: LightningDeprecationWarning: DataModule property `train_transforms` was deprecated in v1.5 and will be removed in v1.7.
  rank_zero_deprecation(
C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\pytorch_lightning\core\datamodule.py:107: LightningDeprecationWarning: DataModule property `val_transforms` was deprecated in v1.5 and will be removed in v1.7.
  rank_zero_deprecation(
Running Evolution for fitness
C:\Users\Jordan\anaconda3\envs\EC2\lib\site-packages\pytorch_lightning\core\datamodule.py:126: LightningDeprecationWarning: DataModule property `test_transforms` was deprecated in v1.5 and will be removed in v1.7.
  rank_zero_deprecation(
  0%|                                                                                            | 0/1 [00:00<?, ?it/s]
  0%|                                                                                           | 0/10 [00:00<?, ?it/s]
Initializing
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.19337493
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.2966461
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.15997507
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.31328177
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18616113
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.30566117
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.1699194
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.27282014
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1315683
3
6
1
torch.Size([64, 128, 16, 16])
4096

 10%|████████▎                                                                          | 1/10 [00:01<00:15,  1.67s/it]
()
0.2902663
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.17842254
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.2787097
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.16098669
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.2998331
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1675049
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.29116964
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.15310666
5
6
1
torch.Size([64, 256, 8, 8])
4096


 40%|█████████████████████████████████▏                                                 | 4/10 [00:06<00:10,  1.70s/it]
()
0.29840055
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.16508277
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.29174897
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.13872084
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.29181805
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.17529158
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.26970908
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.1911571
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.36964074
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.17555504
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3310261
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.20538434
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.33589217
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.18700385
1
6
1
torch.Size([64, 64, 32, 32])
4096

 50%|█████████████████████████████████████████▌                                         | 5/10 [00:08<00:08,  1.70s/it]
()
0.31543297
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.20235494
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.320468
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18661071
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.32335833
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.13889629
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.3038419
2
6
1
torch.Size([64, 128, 16, 16])
4096


 70%|██████████████████████████████████████████████████████████                         | 7/10 [00:11<00:05,  1.72s/it]
()
0.13511676
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.29825765
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.17974952
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.29350173
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.18713392
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.31842098
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.17344087
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.30427015
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.17527255
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.2919634
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.20921831
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.31927374
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.15464304
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.34331703
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.21563722
5
6
1
torch.Size([64, 256, 8, 8])
4096

 80%|██████████████████████████████████████████████████████████████████▍                | 8/10 [00:13<00:03,  1.71s/it]
()
0.33988658
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18124992
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.31129146
6
Generations
6
1
torch.Size([64, 32, 32, 32])
4096
100%|██████████████████████████████████████████████████████████████████████████████████| 10/10 [00:17<00:00,  1.72s/it]
  0%|                                                                                           | 0/10 [00:00<?, ?it/s]
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18576598
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.3120826
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18364972
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.31479177
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.1819625
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.30998227
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18415092
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.3018394
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.1840407
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.31320208
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.1798151
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.31054902
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18451436
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.31596607
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.1864401
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.3123391
6
6
1
torch.Size([64, 32, 32, 32])
4096
(32, 32, 32)
()
0.15661095
1
6
1
torch.Size([64, 64, 32, 32])
4096
(64, 32, 32)
()
0.30734584
2
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.1730389
3
6
1
torch.Size([64, 128, 16, 16])
4096
(128, 16, 16)
()
0.3104733
4
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.18190476
5
6
1
torch.Size([64, 256, 8, 8])
4096
(256, 8, 8)
()
0.3308192
6
6
1
  0%|                                                                                            | 0/1 [01:14<?, ?it/s]
Traceback (most recent call last):
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 218, in <module>
    run()
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 184, in run
    solution_over_time, fitness_over_time = evolution(generations=n_iters, population_size=pop_size, num_children=num_children, tournament_size=tournament_size, num_winners=num_winners, evolution_type=run_name)
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\evolution.py", line 111, in evolution
    child.fitness = net.get_fitness(net_input)
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\net.py", line 158, in get_fitness
    novelty_score = self.compute_feature_novelty()
  File "C:\Users\Jordan\Learning\UVM\Research Projects\Novel-Feature-Detector\net.py", line 243, in compute_feature_novelty
    dist.append(np.abs(ind_activation.detach().cpu().numpy(), ind_activation2.detach().cpu().numpy()))
KeyboardInterrupt